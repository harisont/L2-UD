module Errors where

import Data.List
import Data.Maybe
import RTree
import UDConcepts
import UDPatterns
import Align
import Utils

-- | An error is a pair of aligned (sub)trees, pruned based on the error 
-- pattern they match
type Error = (UDTree,UDTree)
type ErrorPattern = (UDPattern,UDPattern)

linearizeError :: Error -> String
linearizeError = linearizeAlignment

-- | Convert a UD tree into a UD pattern (HST)
-- maybe this belongs in gf-ud though
udTree2udPattern :: UDTree -> UDPattern
udTree2udPattern (RTree n []) = AND [
  FORM (udFORM n), 
  LEMMA (udLEMMA n), 
  POS (udUPOS n), 
  XPOS (udXPOS n),
  FEATS (prt $ udFEATS n), 
  DEPREL (udDEPREL n)
  -- no MISC cause I dunno what the second string is supposed to be:
  -- https://github.com/GrammaticalFramework/gf-ud/blob/f2705537347b417e37f1ccd156708bf066e790d6/UDPatterns.hs#L49
  ]
udTree2udPattern (RTree n ts) = AND [
  TREE (udTree2udPattern (RTree n [])) (map udTree2udPattern ts),
  SEQUENCE $ map udTree2udPattern ns
  ]
    where ns = sortBy (\n m -> compare (rootID n) (rootID m)) (RTree n []:ts)

-- | Shorthand to convert errors to error patterns
error2Pattern :: Error -> ErrorPattern
error2Pattern (e1,e2) = (udTree2udPattern e1,udTree2udPattern e2)

-- | Show an error pattern as a single "L1-L2" pattern ({A -> B} syntax)
showErrorPattern :: ErrorPattern -> String
showErrorPattern (p1,p2) = "{" ++ show p1 ++ " -> " ++ show p2 ++ "}"

type ColumnName = String -- name of a UD column

morphosynColumns :: [ColumnName]
morphosynColumns = ["POS", "XPOS", "FEATS", "DEPREL"]

-- | Discard UD columns from an HST pattern, excepts those explicitly listed
-- NOTE: only works for patterns like those generated by udTree2udPattern
simplifyUDPattern :: UDPattern -> [ColumnName] -> UDPattern
simplifyUDPattern (AND [TREE n ts, SEQUENCE ns]) cols = AND [
  simplifyUDPattern (TREE n ts) cols, 
  simplifyUDPattern (SEQUENCE ns) cols]
simplifyUDPattern (AND vals) cols = 
  AND $ mapMaybe (\col -> find (\val -> col `isPrefixOf` show val) vals) cols
simplifyUDPattern (TREE n ts) cols = 
  TREE (simplifyUDPattern n cols) (map (`simplifyUDPattern` cols) ts)
simplifyUDPattern (SEQUENCE ns) cols = 
  SEQUENCE (map (`simplifyUDPattern` cols) ns) 
simplifyUDPattern p _ = p 

-- | Shorthand for getting the morphosyntactic (POS + XPOS + FEATS + DEPREL)  
-- UD pattern corresponding to a "full" UD pattern
morphosynUDPattern :: UDPattern -> UDPattern
morphosynUDPattern = flip simplifyUDPattern morphosynColumns

-- | Shorthand for getting the "universal" morphosyntactic (POS + FEATS +   
-- DEPREL) UD pattern corresponding to a "full" UD pattern
uniMorphosynUDPattern :: UDPattern -> UDPattern
uniMorphosynUDPattern = flip simplifyUDPattern (morphosynColumns \\ ["XPOS"])